{{ $image := printf "%s:%s" .Values.image.repository (.Values.image.tag | default .Chart.AppVersion) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" . }}
  labels: {{ include "common.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels: {{ include "common.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{ include "common.selectorLabels" . | nindent 8 }}
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum  }}
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum  }}
    spec:
      {{- /*
      initContainers:
      - name: {{ .Chart.Name }}-init
        image: {{ $image }}
        imagePullPolicy: IfNotPresent
        command: ['sh', '-c', "code-server --install-extension /storage/extensions"]
        volumeMounts:
        {{- if eq "true" (.Values.storage.enable | toString) }}
        - mountPath: /storage
          name: storage
        {{- end }}
        */}}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ $image }}
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command: ["/bin/bash","-c","for f in /storage/extensions/*.vsix; do code-server --install-extension $f; done"]
        ports:
        - containerPort: 8080
        - containerPort: 24678
        envFrom:
        - configMapRef:
            name: {{ include "common.fullname" . }}
        resources:
          limits:
            smarter-devices/fuse: 1
          requests:
            smarter-devices/fuse: 1
        securityContext:
          capabilities:
            add:
            - "SYS_ADMIN"
            - "MKNOD"
            - "SYS_CHROOT"
            - "SETFCAP"
            - "NET_ADMIN"
        volumeMounts:
        {{- if eq "true" (.Values.storage.enable | toString) }}
        - mountPath: /storage
          name: storage
        {{- end }}
        {{- range $key, $val := .Values.secrets.ca }}
        - mountPath: /usr/local/share/ca-certificates/ca_{{ $val.name }}.crt
          subPath: ca_{{ $val.name }}.crt
          name: secrets
        {{- end }}
        {{- range $key, $val := .Values.secrets.ssh }}
        - mountPath: /root/.ssh/{{ $val.name }}
          subPath: {{ $val.name }}
          name: secrets
        - mountPath: /root/.ssh/{{ $val.name }}.pub
          subPath: {{ $val.name }}.pub
          name: secrets
        {{- end }}
        {{- if .Values.secrets.gitconfig }}
        - mountPath: /etc/gitconfig
          subPath: gitconfig
          name: secrets
        {{- end }}
        {{- if .Values.secrets.config }}
        - mountPath: root/.config/code-server/config.yaml
          subPath: config.yaml
          name: secrets
        {{- end }}
        - mountPath: /etc/containers/containers.conf
          subPath: containers.conf
          name: secrets
      volumes:
      {{- if eq "true" (.Values.storage.enable | toString) }}
      - name: storage
        hostPath: 
          path: {{ .Values.storage.hostPath }}
          type: DirectoryOrCreate
      {{- end }}
      - name: secrets
        secret:
          secretName: {{ include "common.fullname" . }}
          defaultMode: 0400
          items:
          {{- range $key, $val := .Values.secrets.ssh }}
          - key: {{ $val.name }}_public
            path: {{ $val.name }}.pub
          - key: {{ $val.name }}_private
            path: {{ $val.name }}
          {{- end }}
          {{- range $key, $val := .Values.secrets.ca }}
          - key: ca_{{ $val.name }}_public
            path: ca_{{ $val.name }}.crt
          {{- end }}
          {{- if .Values.secrets.gitconfig }}
          - key: gitconfig
            path: gitconfig
          {{- end }}
          {{- if .Values.secrets.config }}
          - key: config
            path: config.yaml
          {{- end }}
          - key: podmanConfig
            path: containers.conf